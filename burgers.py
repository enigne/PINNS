{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4fe7c333",
   "metadata": {},
   "source": [
    "# Import necessary packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "73e5ed4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-01-04 10:51:15.373907: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2023-01-04 10:51:15.491825: I tensorflow/core/util/port.cc:104] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n",
      "2023-01-04 10:51:15.495660: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /totten_1/chenggong//trunk-jpl/externalpackages/netcdf/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/petsc/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/hdf5/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/zlib/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/proj/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/gdal/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/triangle/install/lib:/totten_1/chenggong/Elmer/install/lib:\n",
      "2023-01-04 10:51:15.495673: I tensorflow/compiler/xla/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2023-01-04 10:51:16.120093: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /totten_1/chenggong//trunk-jpl/externalpackages/netcdf/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/petsc/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/hdf5/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/zlib/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/proj/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/gdal/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/triangle/install/lib:/totten_1/chenggong/Elmer/install/lib:\n",
      "2023-01-04 10:51:16.120166: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /totten_1/chenggong//trunk-jpl/externalpackages/netcdf/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/petsc/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/hdf5/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/zlib/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/proj/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/gdal/install/lib:/totten_1/chenggong//trunk-jpl/externalpackages/triangle/install/lib:/totten_1/chenggong/Elmer/install/lib:\n",
      "2023-01-04 10:51:16.120171: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import os\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import tensorflow_probability as tfp\n",
    "sys.path.append(\".\")\n",
    "from custom_lbfgs import *\n",
    "from burgersutil import *\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "866e1f34",
   "metadata": {},
   "source": [
    "# Settings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "69495def",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Manually making sure the numpy random seeds are \"the same\" on all devices\n",
    "np.random.seed(1234)\n",
    "tf.random.set_seed(1234)\n",
    "\n",
    "# Data size on the solution u\n",
    "N_u = 50\n",
    "# Collocation points size, where we’ll check for f = 0\n",
    "N_f = 1000\n",
    "# DeepNN topology (2-sized input [x t], 8 hidden layer of 20-width, 1-sized output [u]\n",
    "layers = [2, 20, 20, 20, 20, 20, 20, 20, 20, 1]\n",
    "# Setting up the TF SGD-based optimizer (set tf_epochs=0 to cancel it)\n",
    "tf_epochs = 100\n",
    "tf_optimizer = tf.keras.optimizers.Adam(\n",
    "  learning_rate=0.1,\n",
    "  beta_1=0.99,\n",
    "  epsilon=1e-1)\n",
    "# Setting up the quasi-newton LBGFS optimizer (set nt_epochs=0 to cancel it)\n",
    "nt_epochs = 2000\n",
    "nt_config = Struct()\n",
    "nt_config.learningRate = 0.8\n",
    "nt_config.maxIter = nt_epochs\n",
    "nt_config.nCorrection = 50\n",
    "nt_config.tolFun = 1.0 * np.finfo(float).eps"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "119e7bc6",
   "metadata": {},
   "source": [
    "# PINNs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "364e1df8",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "class PhysicsInformedNN(object):\n",
    "    def __init__(self, layers, optimizer, logger, X_f, ub, lb, nu):\n",
    "        # Descriptive Keras model [2, 20, …, 20, 1]\n",
    "        self.u_model = tf.keras.Sequential()\n",
    "        self.u_model.add(tf.keras.layers.InputLayer(input_shape=(layers[0],)))\n",
    "        self.u_model.add(tf.keras.layers.Lambda(\n",
    "            lambda X: 2.0*(X - lb)/(ub - lb) - 1.0))\n",
    "        for width in layers[1:]:\n",
    "                self.u_model.add(tf.keras.layers.Dense(\n",
    "                    width, activation=tf.nn.tanh,\n",
    "                    kernel_initializer='glorot_normal'))\n",
    "\n",
    "        # Computing the sizes of weights/biases for future decomposition\n",
    "        self.sizes_w = []\n",
    "        self.sizes_b = []\n",
    "        for i, width in enumerate(layers):\n",
    "            if i != 1:\n",
    "                self.sizes_w.append(int(width * layers[1]))\n",
    "                self.sizes_b.append(int(width if i != 0 else layers[1]))\n",
    "\n",
    "        self.nu = nu\n",
    "        self.optimizer = optimizer\n",
    "        self.logger = logger\n",
    "\n",
    "        self.dtype = tf.float32\n",
    "\n",
    "        # Separating the collocation coordinates\n",
    "        self.x_f = tf.convert_to_tensor(X_f[:, 0:1], dtype=self.dtype)\n",
    "        self.t_f = tf.convert_to_tensor(X_f[:, 1:2], dtype=self.dtype)\n",
    "        \n",
    "    # Defining custom loss\n",
    "    def __loss(self, u, u_pred):\n",
    "        f_pred = self.f_model()\n",
    "        return tf.reduce_mean(tf.square(u - u_pred)) + \\\n",
    "            tf.reduce_mean(tf.square(f_pred))\n",
    "\n",
    "    def __grad(self, X, u):\n",
    "        with tf.GradientTape() as tape:\n",
    "            loss_value = self.__loss(u, self.u_model(X))\n",
    "        return loss_value, tape.gradient(loss_value, self.__wrap_training_variables())\n",
    "\n",
    "    def __wrap_training_variables(self):\n",
    "        var = self.u_model.trainable_variables\n",
    "        return var\n",
    "\n",
    "    # The actual PINN\n",
    "    def f_model(self):\n",
    "        # Using the new GradientTape paradigm of TF2.0,\n",
    "        # which keeps track of operations to get the gradient at runtime\n",
    "        with tf.GradientTape(persistent=True) as tape:\n",
    "            # Watching the two inputs we’ll need later, x and t\n",
    "            tape.watch(self.x_f)\n",
    "            tape.watch(self.t_f)\n",
    "            # Packing together the inputs\n",
    "            X_f = tf.stack([self.x_f[:,0], self.t_f[:,0]], axis=1)\n",
    "\n",
    "            # Getting the prediction\n",
    "            u = self.u_model(X_f)\n",
    "            # Deriving INSIDE the tape (since we’ll need the x derivative of this later, u_xx)\n",
    "            u_x = tape.gradient(u, self.x_f)\n",
    "        \n",
    "        # Getting the other derivatives\n",
    "        u_xx = tape.gradient(u_x, self.x_f)\n",
    "        u_t = tape.gradient(u, self.t_f)\n",
    "\n",
    "        # Letting the tape go\n",
    "        del tape\n",
    "\n",
    "        nu = self.get_params(numpy=True)\n",
    "\n",
    "        # Buidling the PINNs\n",
    "        return u_t + u*u_x - nu*u_xx\n",
    "\n",
    "    def get_params(self, numpy=False):\n",
    "        return self.nu\n",
    "\n",
    "    def get_weights(self):\n",
    "        w = []\n",
    "        for layer in self.u_model.layers[1:]:\n",
    "            weights_biases = layer.get_weights()\n",
    "            weights = weights_biases[0].flatten()\n",
    "            biases = weights_biases[1]\n",
    "            w.extend(weights)\n",
    "            w.extend(biases)\n",
    "        return tf.convert_to_tensor(w, dtype=self.dtype)\n",
    "\n",
    "    def set_weights(self, w):\n",
    "        for i, layer in enumerate(self.u_model.layers[1:]):\n",
    "            start_weights = sum(self.sizes_w[:i]) + sum(self.sizes_b[:i])\n",
    "            end_weights = sum(self.sizes_w[:i+1]) + sum(self.sizes_b[:i])\n",
    "            weights = w[start_weights:end_weights]\n",
    "            w_div = int(self.sizes_w[i] / self.sizes_b[i])\n",
    "            weights = tf.reshape(weights, [w_div, self.sizes_b[i]])\n",
    "            biases = w[end_weights:end_weights + self.sizes_b[i]]\n",
    "            weights_biases = [weights, biases]\n",
    "            layer.set_weights(weights_biases)\n",
    "\n",
    "    def summary(self):\n",
    "        return self.u_model.summary()\n",
    "\n",
    "    # The training function\n",
    "    def fit(self, X_u, u, tf_epochs=5000, nt_config=Struct()):\n",
    "        self.logger.log_train_start(self)\n",
    "\n",
    "        # Creating the tensors\n",
    "        X_u = tf.convert_to_tensor(X_u, dtype=self.dtype)\n",
    "        u = tf.convert_to_tensor(u, dtype=self.dtype)\n",
    "\n",
    "        self.logger.log_train_opt(\"Adam\")\n",
    "        for epoch in range(tf_epochs):\n",
    "            # Optimization step\n",
    "            loss_value, grads = self.__grad(X_u, u)\n",
    "            self.optimizer.apply_gradients(zip(grads, self.__wrap_training_variables()))\n",
    "            self.logger.log_train_epoch(epoch, loss_value)\n",
    "        \n",
    "        self.logger.log_train_opt(\"LBFGS\")\n",
    "        def loss_and_flat_grad(w):\n",
    "            with tf.GradientTape() as tape:\n",
    "                self.set_weights(w)\n",
    "                loss_value = self.__loss(u, self.u_model(X_u))\n",
    "            grad = tape.gradient(loss_value, self.u_model.trainable_variables)\n",
    "            grad_flat = []\n",
    "            for g in grad:\n",
    "                grad_flat.append(tf.reshape(g, [-1]))\n",
    "            grad_flat =    tf.concat(grad_flat, 0)\n",
    "            return loss_value, grad_flat\n",
    "        # tfp.optimizer.lbfgs_minimize(\n",
    "        #     loss_and_flat_grad,\n",
    "        #     initial_position=self.get_weights(),\n",
    "        #     num_correction_pairs=nt_config.nCorrection,\n",
    "        #     max_iterations=nt_config.maxIter,\n",
    "        #     f_relative_tolerance=nt_config.tolFun,\n",
    "        #     tolerance=nt_config.tolFun,\n",
    "        #     parallel_iterations=6)\n",
    "        lbfgs(loss_and_flat_grad,\n",
    "            self.get_weights(),\n",
    "            nt_config, Struct(), True,\n",
    "            lambda epoch, loss, is_iter:\n",
    "                self.logger.log_train_epoch(epoch, loss, \"\", is_iter))\n",
    "\n",
    "        self.logger.log_train_end(tf_epochs + nt_config.maxIter)\n",
    "\n",
    "    def predict(self, X_star):\n",
    "        u_star = self.u_model(X_star)\n",
    "        f_star = self.f_model()\n",
    "        return u_star, f_star"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5469c0f9",
   "metadata": {},
   "source": [
    "# 1. Continuous Inference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "adbdb31b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TensorFlow version: 2.11.0\n",
      "Eager execution: True\n",
      "WARNING:tensorflow:From /totten_1/chenggong/PINNs/burgersutil.py:131: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.config.list_physical_devices('GPU')` instead.\n",
      "GPU-accerelated: False\n",
      "\n",
      "Training started\n",
      "================\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lambda (Lambda)             (None, 2)                 0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 20)                60        \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_6 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_7 (Dense)             (None, 20)                420       \n",
      "                                                                 \n",
      " dense_8 (Dense)             (None, 1)                 21        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 3,021\n",
      "Trainable params: 3,021\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n",
      "—— Starting Adam optimization ——\n",
      "WARNING:tensorflow:Calling GradientTape.gradient on a persistent tape inside its context is significantly less efficient than calling it outside the context (it causes the gradient ops to be recorded on the tape, leading to increased CPU and memory usage). Only call GradientTape.gradient inside the context if you actually want to trace the gradient in order to compute higher order derivatives.\n",
      "tf_epoch =      0  elapsed = 00:00  loss = 5.3159e-01  error = 1.0111e+00  \n",
      "tf_epoch =     10  elapsed = 00:01  loss = 2.2999e-01  error = 8.1711e-01  \n",
      "tf_epoch =     20  elapsed = 00:02  loss = 2.0302e-01  error = 9.3125e-01  \n",
      "tf_epoch =     30  elapsed = 00:03  loss = 1.7622e-01  error = 7.2456e-01  \n",
      "tf_epoch =     40  elapsed = 00:03  loss = 1.7676e-01  error = 7.0562e-01  \n",
      "tf_epoch =     50  elapsed = 00:04  loss = 1.9574e-01  error = 7.1769e-01  \n",
      "tf_epoch =     60  elapsed = 00:05  loss = 1.7109e-01  error = 6.1370e-01  \n",
      "tf_epoch =     70  elapsed = 00:06  loss = 1.5881e-01  error = 6.1602e-01  \n",
      "tf_epoch =     80  elapsed = 00:07  loss = 1.5868e-01  error = 7.0570e-01  \n",
      "tf_epoch =     90  elapsed = 00:07  loss = 1.5909e-01  error = 5.6441e-01  \n",
      "—— Starting LBFGS optimization ——\n",
      "nt_epoch =     10  elapsed = 00:09  loss = 1.0457e-01  error = 5.5858e-01  \n",
      "nt_epoch =     20  elapsed = 00:10  loss = 7.8547e-02  error = 5.3027e-01  \n",
      "nt_epoch =     30  elapsed = 00:11  loss = 6.0840e-02  error = 4.8782e-01  \n",
      "nt_epoch =     40  elapsed = 00:11  loss = 5.1681e-02  error = 4.5858e-01  \n",
      "nt_epoch =     50  elapsed = 00:12  loss = 4.6195e-02  error = 4.3833e-01  \n",
      "nt_epoch =     60  elapsed = 00:13  loss = 4.2112e-02  error = 4.2836e-01  \n",
      "nt_epoch =     70  elapsed = 00:14  loss = 3.8239e-02  error = 3.7688e-01  \n",
      "nt_epoch =     80  elapsed = 00:15  loss = 3.4464e-02  error = 3.7551e-01  \n",
      "nt_epoch =     90  elapsed = 00:16  loss = 3.3111e-02  error = 3.7009e-01  \n",
      "==================\n",
      "Training finished (epoch 200): duration = 00:17  error = 3.6682e-01  \n"
     ]
    }
   ],
   "source": [
    "# Getting the data\n",
    "path = os.path.join(appDataPath, \"burgers_shock.mat\")\n",
    "x, t, X, T, Exact_u, X_star, u_star, \\\n",
    "X_u_train, u_train, X_f, ub, lb = prep_data(path, N_u, N_f, noise=0.0)\n",
    "\n",
    "# Creating the model and training\n",
    "logger = Logger(frequency=10)\n",
    "pinn = PhysicsInformedNN(layers, tf_optimizer, logger, X_f, ub, lb, nu=0.01/np.pi)\n",
    "def error():\n",
    "    u_pred, _ = pinn.predict(X_star)\n",
    "    return np.linalg.norm(u_star - u_pred, 2) / np.linalg.norm(u_star, 2)\n",
    "logger.set_error_fn(error)\n",
    "pinn.fit(X_u_train, u_train, tf_epochs, nt_config)\n",
    "\n",
    "# Getting the model predictions, from the same (x,t) that the predictions were previously gotten from\n",
    "u_pred, f_pred = pinn.predict(X_star)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5256a2e4",
   "metadata": {},
   "source": [
    "# Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b42b9fa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "U_pred = griddata(X_star, u_pred.numpy().flatten(), (X, T), method='cubic')\n",
    "\n",
    "plt.figure(figsize=(10,7))\n",
    "fig = plt.imshow(U_pred.T, interpolation='nearest', cmap='rainbow', \n",
    "            extent=[t.min(), t.max(), x.min(), x.max()],\n",
    "            origin='lower', aspect='auto')\n",
    "plt.xlabel('t')\n",
    "plt.ylabel('x')\n",
    "plt.colorbar()\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22d578d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
